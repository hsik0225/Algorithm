package cp8.math1;

import java.util.Scanner;

/*

https://www.acmicpc.net/problem/1011

이전 작동시기에 k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다.

예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며,

그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다.

( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. )

김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 x지점에서 y지점을 향해 최소한의 작동 횟수로 이동하려 한다.

하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.

김우현을 위해 x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.

입력
입력의 첫 줄에는 테스트케이스의 개수 T가 주어진다.

각각의 테스트 케이스에 대해 현재 위치 x 와 목표 위치 y 가 정수로 주어지며, x는 항상 y보다 작은 값을 갖는다. (0 ≤ x < y < 231)

출력
각 테스트 케이스에 대해 x지점으로부터 y지점까지 정확히 도달하는데 필요한 최소한의 공간이동 장치 작동 회수를 출력한다.

최소로 움직였을 경우

 순서 / 최소 움직임 / 움직이는 거리
1        1      1
2        2      1   1
3        3      1   1   1
4        3      1   2   1
5        4      1   2   1   1
6        4      1   2   2   1
7        5      1   2   2   1   1
8        5      1   2   2   2   1
9        5      1   2   3   2   1
10       6      1   2   3   2   1   1
11       6      1   2   3   2   2   1
12       6      1   2   3   3   2   1
13       7      1   2   3   3   2   1   1
14       7      1   2   3   3   2   2   1
15       7      1   2   3   3   3   2   1
16       7      1   2   3   4   3   2   1

 */
public class Baekjoon1011 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();

        while (n-- > 0) {
            int diff = -scanner.nextInt() + scanner.nextInt();
            int length = 1;
            int i = 1;

            // 거리가 1일 때는 while문을 패스하고
            // 거리가 2일 때부터 시작한다
            while (i < diff) {
                diff -= i;
                i += ++length % 2 > 0 ? 1 : 0;
            }

            System.out.println(length);
        }
    }
}
